<resources>
    <string name="app_name">Fragment2 - News </string>
    <string name="latest_news">Latest news</string>
    <string name="news_logo">News logo</string>
    <string name="oboe_title"><b>High Performance Game Audio with Oboe</b></string>
    <string name="oboe_text">We\'ve added the Oboe C++ audio library to the Android Game SDK. Oboe\'s support of high-performance, low-latency audio across the widest range of Android devices is the right choice for most game developers.\n\n

        <b>Single API</b>\n\n

On Android devices running Android 8.1 (API level 27) and higher, Oboe takes advantage of the improved performance and features of AAudio while maintaining backward compatibility (using OpenSL ES) with Android 4.1 (API level 16) and higher. Oboe also adds key features on top of the platform APIs to improve the audio developer experience, such as resampling, format conversion, and dynamic latency tuning. It performs audio data transformations, such as channel count conversion, when necessary to improve performance on selected devices, and has workarounds for other device-specific behaviors that improve the robustness of your audio code. In short, Oboe is now the recommended way to write audio code in C/C++ on Android.\n\n

        <b>Integrating Oboe</b>\n\n

There are two primary ways to incorporate Oboe library prebuilts into your project. If you\'re using the Android Gradle plugin version 4.1.0 or higher along with CMake, and are using or can enable shared STL, enabling Oboe is as easy as adding Oboe to your Gradle dependencies, enabling prefabs, and adding a few lines to your CMakeLists file.\n\n

You can also integrate Oboe by statically linking using the Android Game SDK. Begin by downloading the library and checking it into your source control system. You need to be using minSdkVersion of 16 or higher with NDK release 18 or higher. Then, to specify the version of the game SDK to link in that\'s been compiled for the given ABI, API level, NDK, and STL combination, add a compiler include path in this form:\n\n
<b><code>gamesdk/libs/[architecture]_API[apiLevel]_NDK[ndkVersion]_[stlVersion]_Release
Example: gamesdk/libs/arm64-v8a_API24_NDK18_cpp_static_Release</code></b>\n\n
Then add -loboe_static to your linker command. Since you don\'t need to bundle the liboboe.so shared library, static linking gives you a smaller code footprint. If the ABI, API level, NDK, and STL combination doesn\'t have a precompiled version available for your settings, you can alternately link against the shared library. We have more guidance, including how to configure CMake for static libraries, in our developer documentation. \n\n\n 23 March 2021</string>
    <string name="android_12_text">Last month we shared the first preview of Android 12, an early look at the next version of Android. Today we\’re bringing you the next milestone build in this year\’s release, with more new features and changes for you to try with your apps. Our program of early previews is driven by our core philosophy of openness and collaboration with you, our community. Your input helps us make Android a better platform for developers and users, so keep the feedback coming!\n\n
In Android 12 we\’re making the OS smarter, easier to use, and better performing, with privacy and security at the core. We\’re also working to give you new tools for building great experiences for users, whether they\’re using phones, laptops, tablets, TVs, or cars. Some things to look for in today\’s release include new rounded corners APIs, improved picture-in-picture APIs, better companion device management, easier effects like blur and color filter, app overlay controls, and more.\n\n
There\’s a lot to check out in Developer Preview 2 - read on for a few highlights and visit the Android 12 developer site for details and downloads for Pixel. For those already running Developer Preview 1 or 1.1, we\’re also offering an over-the-air (OTA) update to today\’s release.\n\n
Let us know what you think, and thank you to everyone who has shared such great feedback so far.\n\n
<b>Trust and safety</b>\n\n
We\’re continuing to focus on giving users more transparency and control while keeping their devices and data secure. In today\’s release, we\’ve added some new features to check out and test with your apps.\n\n
App overlay controls - Android\’s system alert window gives apps a way to get users attention for important actions by showing an overlay on top of the active app. These windows can interrupt the user, though, so we already require apps to request permission before displaying them. Now in Android 12 we\’re giving you control over whether these overlays can be shown over your content. After you\’ve declared a new permission, your app can call Window#setHideOverlayWindows() to indicate that all TYPE_APPLICATION_OVERLAY windows should be hidden when your app’s window is visible. You might choose to do this when displaying sensitive screens, such as transaction confirmation flows. More here.\n\n
Extended security for lockscreen notification actions - Android 12 adds finer-grained privacy and security controls for notifications displayed on the device lockscreen. You can now configure notification actions so that when triggered from the lockscreen, they will always generate an authentication challenge. This extends the notification visibility controls already available through the notification APIs. For example, this enables a messaging app to require authentication before deleting a message or marking it as read. More here.\n\n
Access to app digests - For apps that need to validate the integrity of app packages installed on Android devices, we\’re introducing a new API that lets you query the platform directly for the checksum of an installed app. You can choose from several digest algorithms such as SHA256, SHA512, Merkle Root, and others. To request a checksum, call PackageManager.requestChecksums() with an app\’s package name, the checksum types you need, the installer certs you trust, and a listener to receive the checksums. The platform returns the matching checksums, either precomputed and provided by the installer app (such as Google Play) or computed by the platform. Results are filtered based on package visibility guidelines, so you\’ll need to declare the packages of interest in your manifest. This new API provides a simpler, more efficient way to obtain checksums and gives you the stability of a standard, public API that\’s optimized for speed and security. For backward compatibility, we\’re working on a Jetpack library that provides the same functionality back to API 15 - watch for more details coming soon.\n\n
        <b>Better user experience tools</b>\n\n
We\’re working to give you more tools to help you deliver a polished experience and better performance for users. Here are some of the updates in today\’s release.\n\n
Support for Rounded corners - Many modern devices use screens with rounded corners, giving them a clean modern look, but also introducing some extra considerations for app developers. To deliver a great UX on these devices, developers need to account for the rounded corners and adjust any nearby UI elements to prevent them from being truncated.\n
To help with this, we\’re introducing new APIs to let you query for rounded corners and get their details. A RoundedCorner holds the details for a corner, including its radius, centerpoint, and other data. You can call Display.getRoundedCorner() to get the absolute details for each rounded corner. You can also call WindowInsets.getRoundedCorner() to get the corner details relative to your app\’s bounds. With these, you can manage the position of UI elements and content as needed.\n
Picture in Picture (PIP) improvements - for people using gesture nav, we\’ve improved how apps transition to picture-in-picture (PIP) mode on swipe up-to-home. If an app enables auto-PIP, the system now directly transitions the app to PIP mode on up-to-home, instead of waiting for the up-to-home animation to complete. This makes the transition smoother and improves perceived performance. We\’ve also improved PIP window resizing for non-video content. Apps can now enable seamless resize to let the system resize the PIP Activity when needed. Android 12 also supports stashing the PiP window by dragging it to the left or right edge of the screen. Also, to make PIP windows easier to manipulate, we\’ve updated the tap behaviors. Single-tapping now displays controls, and double-tapping toggles the PIP window size. \n
Keeping companion device apps awake - For apps that manage companion devices like smartwatches and fitness trackers, it can be a challenge to make sure the app is running and connected whenever an associated companion device is nearby. To make this easier, we\’re extending the Companion Device Manager with a new CompanionDeviceService API. Apps that manage companion devices can implement this service to let the system wake the app whenever the associated companion device is nearby. The system keeps the service bound whenever the device is nearby, and notifies the service when the device goes in and out of range or is turned off, to let the app clean up state as needed. Apps can also use a new companion device profile when connecting to a watch, which simplifies enrollment by bundling related permissions into a single grant. \n
Bandwidth estimation improvements - for developers who need to know the typical bandwidth available to each user so you can tailor their experience, we now provide improved bandwidth estimation. We\’ve enhanced the existing bandwidth estimation APIs to let you retrieve an estimate of aggregate throughput per carrier or Wi-Fi SSID, network type, and signal level, for all users on the device. The new estimation is likely to be easier and more accurate than most other estimation methods, give it a try and let us know how it works for you.\n
Easier blurs, color filters and other effects - In Android 12, we\’re making it easier to apply common graphics effects to your Views and rendering hierarchies. You can use RenderEffect to apply blurs, color filters, and more to any RenderNode. You can combine these effects as chain effects (which compose an inner and outer effect in order) or blend them. You can also apply effects directly to Views (leveraging the underlying RenderNode) by calling View.setRenderEffect(RenderEffect).\n\n
<b>view.setRenderEffect(RenderEffect.createBlurEffect(radiusX, radiusY, SHADER_TILE_MODE))</b>\n\n
This allows you to blur the contents of an ImageView without having to get the bitmap data, process the image, create a new Bitmap, and set it back into the ImageView. RenderEffect leverages the existing rendering pipeline to minimize excess calculation.\n
You can also create a frosted glass effect for your window background using a new Window.setBackgroundBlurRadius() API. With this you can set a radius to control the density and scope and the platform applies the blur to the background content within the bounds of your app\’s window only. You can also use blurBehindRadius to blur all of the content behind the window to create a depth effect for a floating window.\n\n
<b>App compatibility</b>\n\n
We\’re working to make updates faster and smoother by prioritizing app compatibility as we roll out new platform versions. In Android 12, we\’ve made most app-facing changes opt-in to give you more time, and we\’ve updated our tools and processes to help you get ready sooner.\n
With Developer Preview 2, we\’re well into the release and continuing to improve overall stability, so now is the time to try the new features and changes and give us your feedback. We\’re especially looking for input on our APIs, as well as details on how the platform changes affect your apps. Please visit the feedback page to share your thoughts with us or report issues.\n
It\’s also a good time to start your compatibility testing and identify any work you\’ll need to do. We recommend doing the work early, so you can release a compatible update by Android 12 Beta 1. There\’s no need to change your app\’s targetSdkVersion at this time, but we do recommend using the behavior change toggles to get a preliminary idea of how your app might be affected by opt-in changes in Android 12.\n
As we reach Platform Stability in August 2021, all of the app-facing system behaviors, SDK/NDK APIs, and non-SDK lists will be finalized. At that point, you can wind up your final compatibility testing and release a fully compatible version of your app, SDK, or library. More on the timeline for developers is here.\n\n
<b>Get started with Android 12</b>\n\n
The Developer Preview has everything you need to try the Android 12 features, test your apps, and give us feedback. You can get started today by flashing a device system image to a Pixel 3 / 3 XL, Pixel 3a / 3a XL, Pixel 4 / 4 XL, Pixel 4a / 4a 5G, or Pixel 5 device or using the Android Emulator. If you\’ve already installed a preview build to your Pixel device, you\’ll automatically get future updates over-the-air for all later previews and Betas. More details on how to get Android 12 are here.\n
You can also test your apps on Android TV using today\’s release and try the all-new Google TV experience. Learn more here and get started with your ADT-3 developer kit.\n\n\n 17 March 2021</string>
    <string name="android_12_title"><b>Android 12 Developer Preview 2</b></string>
    <string name="final_challenge_title"><b>Android Dev Challenge Finale: Weather app</b></string>
    <string name="final_chellenge_text">Let your creativity shine in the final week of the #AndroidDevChallenge! Last week we asked you to be fast, but for this final week we ask you to bring your \'A\' game. Here\’s the challenge:\n\n
<b>Week #4: Weather app 🌤</b>\n\n
Create a single-screen weather forecast app. You have until March 23rd, 23:59 PST to submit your entry.\n
Your UI must be fully built in Compose. You can use fake weather data.\n\n
We will judge your submission on these four categories:\n\n
- Visual beauty\n
- Novelty of idea\n
- Code quality\n
- Overall execution (including accessibility)\n\n
To help implement a beautiful design, check out the Compose documentation on layouts, theming, and graphics. Think of novel uses of animations and gestures. Improve your code quality with architecture and testing. And for overall execution, make sure to read about accessibility.\n\n
Your solution must be implemented in a public GitHub repository. Make a copy of this Github repository template and follow the instructions in the README. The template contains a basic Hello World! in Compose and a continuous integration setup.\n\n
The App Submission must, at a minimum, support English language use.\n\n
<b>This week\’s prize: 5 x Google Pixel 5!</b>\n\n
This week you have a chance of winning a Google Pixel 5, the ultimate 5G Google phone! We\’ll be giving away one Google Pixel 5 for the winner of each of the four categories, and one for the best of the best submission.\n\n
<b>Help make Jetpack Compose better</b>\n\n
Community is at the heart of Jetpack Compose and your feedback helps us build a better product:\n\n
- File issues with Jetpack Compose on the official issue tracker.\n
- Sign up to be part of the Jetpack Compose research studies.\n\n
       Video: <b>https://youtu.be/sZK3HSX4cRU</b>\n\n\n 17 March 2021
</string>
    <string name="boost_develop_title"><b>Boosting developer success on Google Play</b></string>
    <string name="boost_develop_text">Helping developers build sustainable businesses is a core part of Google Play\’s mission. We work with partners every day to understand the challenges they face and help them bring their innovative ideas to life. Getting a new app off the ground and into orbit is not easy! To aid their quest for growth we provide a broad range of support, from powerful marketing tools and actionable data in the Play Console, education via Play Academy, best practices and thought leadership resources, programs such as the Indie Games Festival, Indie Corner, and accelerator programs around the world. We\’re always looking for new ways to give them an added boost.\n\n
Starting on July 1, 2021 we are reducing the service fee Google Play receives when a developer sells digital goods or services to 15% for the first $1M (USD) of revenue every developer earns each year. With this change, 99% of developers globally that sell digital goods and services with Play will see a 50% reduction in fees. These are funds that can help developers scale up at a critical phase of their growth by hiring more engineers, adding to their marketing staff, increasing server capacity, and more.\n\n
While these investments are most critical when developers are in the earlier stages of growth, scaling an app doesn\’t stop once a partner has reached $1M in revenue — we\’ve heard from our partners making $2M, $5M and even $10M a year that their services are still on a path to self-sustaining orbit. This is why we are making this reduced fee on the first $1M of total revenue earned each year available to every Play developer, regardless of size. We believe this is a fair approach that aligns with Google\’s broader mission to help all developers succeed. We look forward to sharing full details in the coming months.\n\n
As a platform we do not succeed unless our partners succeed. Android and Google Play have always listened to our developer partners from around the world and we continue to take their input into account as we build and run the ecosystem. We look forward to seeing more businesses scale to new heights on Android, and to further discussions with our developer community to find new ways to support them technically and economically as they build their businesses.\n\n\n 16 March 2021
</string>
    <string name="week_three_challenge_title"><b>Android Dev Challenge: Week 3 - Speed round</b></string>
    <string name="week_three_challenge_text">On your marks…Get set… Wait a second! Save the date for the third week of the #AndroidDevChallenge! On March 13th, compete with other developers in your time zone; the fastest Compose skills wins! We loved all the creative submissions of week #1 and #2, but now we\’re looking for speed. Here\’s your challenge:\n\n
<b>Week #3 - Speed round 🏎</b>\n\n
Be the fastest to implement a set of designs provided by us. The designs will be posted here when the challenge starts. Submit your entry as soon as you finish implementing the designs.\n\n
We\’ll post different designs at 3 different times on the 13th:\n\n
- APAC-friendly: opens at 9AM UTC+8\n
- EMEA-friendly: opens at 9AM UTC\n
- Americas-friendly: opens at 9AM UTC-8\n
We\’ll update this blog post at the beginning of each round with the link to the designs.\n\n
Your UI must be fully built in Compose, and strictly match all the guidelines specified in the designs. To help you with the implementation, check out the Compose documentation on theming, layouts, and navigation. For some hands-on learning try out the Compose pathway, with codelabs covering several topics useful for completing this challenge.\n\n
Your solution must be implemented in a GitHub repository. Make a copy of this Github repository template and follow the instructions in the README. The template contains a basic Hello World! in Compose and a continuous integration setup.\n\n
<b>This week\’s prize: a Google Pixel 5!</b>\n\n
For this week\’s challenge, we\’re giving away a Google Pixel 5, the ultimate 5G Google phone. In fact, we\’ll be giving away three Google Pixel 5 phones: one to each developer who is fastest to submit a successfully implemented design for each of the three rounds of challenges\n\n\n 10 March 2021
 </string>
    <string name="sub_dollar_title"><b>Sub-dollar pricing expansion in 20 markets</b></string>
    <string name="sub_dollar_text">At Google Play, we\’re committed to giving Android developers access to the largest possible market for your apps and games. Google Play already supports free and paid apps in over 165 markets. We had previously lowered minimum prices developers can set for their products for 20 markets like India and Brazil. Today, we\’re happy to announce that we have reduced the minimum price limit for products in 20 more markets across Latin America, EMEA, and APAC.\n\n
With these new lower limits, you can now set prices in the range of 10-30 cents US equivalent in most of these markets. These ultra-low price points, or “sub-dollar” prices, allow you to reach new potential buyers by adjusting your pricing to better reflect local purchasing power and demand. It also gives you more flexibility to set your global pricing strategy and gives more users the opportunity to enjoy monetized experiences in your apps and games.\n\n
The minimum price limit for paid apps, in-app products, and subscriptions has been lowered in these new markets: Bangladesh, Bulgaria, Bolivia, Costa Rica, Czech Republic, Denmark, Croatia, Hungary, Jordan, Kazakhstan, Lebanon, Sri Lanka, Myanmar, Pakistan, Paraguay, Romania, Serbia, Thailand, Tanzania and Vietnam.\n\n
Additional markets where sub-dollar pricing is available: Brazil, Chile, Colombia, Egypt, India, Indonesia, Malaysia, Mexico, Nigeria, Peru, Philippines, Poland, Russia, Saudi Arabia, South Africa, Turkey and Ukraine\n\n
To adjust your prices in Google Play Console, please see our Help Center article. The full list of price ranges can be found here.\n\n
<b>Best practices for sub-dollar pricing</b>\n\n
Since the feature was introduced in 2015, Android developers have been using sub-dollar pricing to expand their paying user base in creative ways. Here are a few ways you can use sub-dollar pricing to help grow your own business:\n\n

- <b>Try offering limited-time promotions.</b> Sub-dollar pricing is a great tool to entice new users through promotions, or to reward loyal users with low-cost perks. For example, to convert more paying users of their popular game Lords Mobile, developer IGG sometimes offers special bundles for only IDR 3000 (USD 0.20) that offer 2-3x more value for a limited time. Because these are special offers, it allowed them to expand their payer base without cannibalization.\n\n
- <b>Offer seasonal deals.</b> Sub-dollar pricing is also useful for seasonal sales. Because users know they have a limited opportunity to buy these items, it makes them more attractive. Combined with the low price, it can be an attractive offer for first time buyers. Moonton offers rare skins when users make their first purchase of the season in Mobile Legends, even if it\’s a sub-dollar purchase.\n\n
- <b>Try introductory pricing offers.</b> Sub-dollar pricing can also be used to attract new paying users with introductory pricing. For example, you could offer users who have never made a purchase a valuable item at a sub-dollar price. Developer Moonton does this, offering users access to popular heroes in their game Mobile Legends: Bang Bang when they make their first purchase. This strategy helps them reach new paying users without much impact on their overall game economy.\n\n
- <b>Reward loyalty.</b> You can also try sub-dollar pricing in conjunction with repeat purchase events. For example, you could offer special bonuses to players making one purchase a day for seven days, without users spending more than they are comfortable with.\n\n
- <b>Offer gacha.</b> Sub-dollar pricing works well for chance-based items, or “gacha,” which can appeal to new users. Users who aren\’t willing to spend $5 on a valuable in-game item may be willing to pay $0.15 to open a treasure chest with a chance of finding the item inside. By offering gacha at sub-dollar pricing, many users may be willing to pay a token amount just to try their luck.\n\n
There are many ways to use sub-dollar and localized pricing and the suggestions listed above are just a starting point. We\’re excited to see how you’ll use our features to grow your business.\n\n\n 04 March 2021
</string>
    <string name="next">Next</string>
</resources>